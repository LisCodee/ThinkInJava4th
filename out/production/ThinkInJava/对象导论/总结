## 对象导论
一、五个基本特征
    1. 万物皆为对象
    2. 程序是对象的集合，通过发送消息来告知彼此所要做的。（要想请求一个对象，必须对该对象发送一条消息。)
    3. 每个对象都有自己的由其他对象所构成的存储。
    4. 每个对象都拥有其类型。
    5. 某一特定类型的所有对象都可以接受同样的消息。（向上转型）
二、每个对象都有一个接口。（我的理解是所有对象都是通过某个类实例化得到的，所以他们具有某个类的方法和属性，此类就可以说是对象的接口）
三、每个对象都提供服务
    将一个对象看做服务提供者，在设计过程中每个对象都可以很好的完成一件事，并不尝试去做更多不同的事，如此有助于提高对象的内聚性。
四、被隐藏的具体实现
    将程序开发人员按角色分为类创建者和客户端程序员，类创建者只需要构建类，同时向客户端程序员暴露必须的接口而隐藏具体细节的实现，
    客户端程序员用这些类来快速开发所需要的程序。
    访问控制的两个必要原因一个是让客户端程序员无法触及他们不应该触及的部分，第二个原因是你可以改变类的内部工作方式而不会影响客户端
    程序员。（关键字public,private,protected)
五、复用具体实现
    在Java中复用的具体实现有组合和继承。
    组合：在"拥有"关系下，一般使用组合。例如：汽车拥有引擎
六、继承：当新类与已有类的属性和方法相似时可以使用继承，子类会拥有父类的属性和方法，当父类的属性或方法修改时子类也随之发生修改。
         同时子类可以有自己独特的属性和方法。（它复制了基类的接口）
         *导出类与基类具有相同的类型
七、伴随多态的可互换对象
    处理类型的层次结构时，经常想把一个对象当做其基类对象来看待。
    向上转型：将一个导出类当做其基类来看待，向上转型是安全的。
    后期绑定：当向对象发送消息时，被调用的代码直到运行时才确定。在Java中动态绑定是默认行为，编译器会自动调用适用的方法。
八、单根继承结构
    在Java中所有的类最终都继承自Object
九、容器
    Java中含有大量的容器来满足你的基本需要
    向下转型：将一个泛华类型转化为一个更具体的类型，这种行为是不安全的。
    可以通过泛型来定制一个只接受和取出特定类型的容器。
十、对象的创建和生命周期
    Java中完全采用了动态内存分配方式，直接在堆上创建对象。而垃圾回收机制可以自动发现对象何时不再使用并且销毁他。
十一、异常处理
    异常处理是Java唯一可接受的错误报告方式，如果没有编写正确的处理异常的代码则通不过编译。
十二、并发编程
    并发内置于Java语言中，并有大量额外的库支持。
十三、网络编程
    在Java EE中详述。
